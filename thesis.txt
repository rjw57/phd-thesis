A V E RY I N T E R E S T I N G D I S C U S S I O N S O M E D I FFI C U LT T O P I C S FIELD
A. N. Other
IN A

OF

COMPLEX


Contents

1 Test chapter 1.1 Test section . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1.1.1 Properties of the conic transform . . . . . . . . . . . . 1.1.2 Intersections . . . . . . . . . . . . . . . . . . . . . . . . 1.1.3 Reflections . . . . . . . . . . . . . . . . . . . . . . . . 1.2 Line Images in a Para-catadioptric Camera . . . . . . . . . . . 2 Another Test Chapter -- This time we will use a very long title and see how wrapping works 2.1 Test section . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.1.1 Properties of the conic transform . . . . . . . . . . . . 2.1.2 Intersections . . . . . . . . . . . . . . . . . . . . . . . . 2.1.3 Reflections . . . . . . . . . . . . . . . . . . . . . . . . 2.2 Line Images in a Para-catadioptric Camera . . . . . . . . . . . 3 Matrices 3.1 Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3.1.1 Finding H from a generator . . . . . . . . . . . . . . . 3.1.2 Finding the generator from H . . . . . . . . . . . . . .

1 2 2 3 4 4

8 9 9 10 11 11 13 14 15 17


1
Test chapter
So far we have been limited in which objects we can manipulate and intersect in CGA. Specifically we can only deal with planes, circles, spheres, lines and points. In this section we consider a method of extending our approach to conics and intersections thereof. We shall proceed by considering the 3dimensional Euclidean case but this method may be generalised to higher dimensions if required; here we follow the procedure outlined in [?]. We shall begin by considering the set of points on the unit sphere at the origin:
¨

c e1 + s c e2 + s c e3 :  P (0; 2];  P (0; ]

©

form F (¡) to obtain the set, S, of representations for these points:
&

where c = cos(), s = sin() and similarly for s and c . We apply the trans'

S=

n n ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 2 2

and consider the effect of the transform from [?] below
i  C (X ) =  X + (X ¡ e1 )  n ¯ 2 h

which we shall term the conic transform, upon the elements of S where  is chosen so that our normalisation constraint C (X ) ¡ n =  1 still holds:
& n n 1 ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 1    cos  2 2 '

fC(X ) : X P Sg 


1.1

Test section
The elements of this set are no-longer null-vectors (they have extra components parallel to n) but one may still apply the inverse mapping F  1 (¡) and extract a spatial vector (i.e. one with no components parallel to e or e). It ¯ is found [?, ?] that the spatial vectors extracted thus lie on the surface of a quadric with a rotational cross-section corresponding to a conic. The form of this conic cross-section is determined by the parameter  which can be interpreted as the eccentricity:

 

 = 0 : The set of points lie on the unit sphere. 0 <  < 1 : The set of points lie on an ellipsoid formed by rotating an ellipse in the e12 plane about e1 . The origin lies at one of the foci and  is the eccentricity.

 

 = 1 : The set of points lie on a paraboloid specified by the points

fx : 2x ¡ e1 = [(x ¡ e2)2 + (x ¡ e3)2]   1g

:

 > 1 : The set of points lie on a two-sheeted hyperboloid formed by rotating an hyperbola in the e12 plane about e1 . The origin is once again one of the foci and the eccentricity is .

We may therefore form a set of representations for points lying on these conics by simply applying appropriate translation, dilation and rotation rotors after the conic transform.

1.1.1

Properties of the conic transform
It can further be shown [?] that the conic transform preserves the outer prodY ) = C (X )  C (Y ). It also preserves the `special' vectors n and n. From this ¯ we can easily show that C (¡) does not change the nature of `flat' objects (i.e. C (X1  X2  ¡ ¡ ¡  Xi  n) C (X1 )  C (X2 )  ¡ ¡ ¡  C (Xi )  C (n) C (X1 )  C (X2 )  ¡ ¡ ¡  C (Xi )  n: planes and lines transform to other planes and lines) since
= =

uct but not the inner (and hence geometric) products. That is to say C (X 

Test chapter

2


It is also easy to verify by direct substitution that the conic transform preserves direction of points from the origin, i.e. that F  1 (C (F (ai ei ))) = ai ei 1   a1

where we have adopted the usual summation convention.

1.1.2

Intersections
We may now consider how to apply this transform to intersecting conics with lines. Suppose that we have found a rotor R and value of  such that the set of points represented by ~ fRC(X )R : X P Sg lie on the conic we wish to intersect. Suppose further that we wish to intersect it with the line represented by the trivector L (as in figure 2.1a). We shall denote the points of intersection A and B. Now consider the effect of apply-

 ~ ing C 1 (RX R) to each of our objects and points (where X is the appropriate
object). The points on the conic are transformed to the unit sphere. The line,

 ~ L, is transformed to C 1 (RLR) (figure 2.1) which is still a line since the conic
transform maps lines to lines. The points of intersection between this new line and our unit sphere may be found via the usual meet formulation:

 ~ AH  BH =   C 1 (RLR)
where  is the multivector representing the unit sphere which may be formed as  = F (e1 )  F (e2 )  F (e3 )  F ( e1 ) or similar. ~ ~ Finally we consider the transformed points A = RC (AH )R and B = RC (BH )R.

 ~ They must lie upon our original line L since AH and BH clearly lie on C 1 (RLR)
and

 ~ ~ RC (C 1 (RLR))R = L:
They must also lie upon our conic since AH and BH lie on the unit sphere and the transformation is exactly that which generated our original conic. If they lie upon our conic and upon L they must therefore be the points of intersection. We have therefore formulated a method for intersecting lines and conics.

Test chapter

3


Figure 1.1: Intersection of line L with (a) conic and (b) transformation back to intersection with unit sphere.

1.1.3

Reflections
We now consider the reflection of rays from conics. In order to reflect a ray we wish to find the tangent plane for a conic at the intersection point of the incoming ray with the conic. Again we make use of the fact that C (¡) maps

 ~ planes to planes and apply C 1 (RX R) to all objects moving the points on the

conic to the unit sphere. We then find the intersection point and tangent plane for the unit sphere. It can be shown [?] that when transformed back ~ via RC (¡)R the tangent plane of the sphere maps to the tangent plane for the conic. Reflection can then be performed by simply reflecting the incoming ray L in this plane, : LH = L:

1.2

Line Images in a Para-catadioptric Camera
As an illustration of the power of the techniques described above, let us consider the simple but useful question of what the image of a straight line in a parabolic mirror based Single View Point catadioptric (SVP Para-catadioptric) camera is. This problem has been considered in a number of papers e.g. [?, ?, ?, ?] and is useful for calibration and scene reconstruction. The setup in question is illustated in figure 2.2. With a parabolic mirror the SVP constraint requires that all the rays from the mirror imaged by the camera are parallel to the mirror axis and hence the camera is orthographic. Let us consider the source of light forming an image at the point xe2 + ye3 . As

Test chapter

4


Figure 1.2: Para-catadioptric Line Image Formation

we are imaging with an orthographic camera, for the setup shown, this ray is in the e1 direction, which is axis of both the camera and the parabolic mirror. The focus of the parabolic mirror is situated at the origin. S1
= [e23 + (xe3

  ye2)n]£

This result is easily established if we consider the form of the dual of a line [?]. L£
=

mI3 + [(a  m)I3 ]n ^ ^

with m = e1 (the ray's direction), a = xe2 + ye3 (a point on the ray) and I3 = e123 . ^ This form is analogous to writing the line in terms of Plucker coordinates ¨ where 3 of the coordinates give the line's direction and the other 3 give its moment about the origin. We are interested in the reflection of this ray in the mirror. This reflected ray, S2 is found as described in Section 2.1.3. S2
=

1   x2   y2 e145   xe245   ye345 2

(1.1)

For this ray to be the image ray of a point on a line L they must intersect and hence L  S2
=

0

(1.2)

Test chapter

5


As stated above, a line, L, with unit direction vector m = m1 e1 + m2 e2 + m3 e3 ^ (such that m2 ^ expressed as L
= [mI3 + ((a ^ =

1) passing through the point a = a1 e1 + a2 e2 + a3 e3 , can be

 m)I3)n]£ ^

(1.3)

Subsituting equations 3.3 and 3.1 into 3.2 and rearranging, the condition obtained is
 2

a3 m1   a1 m3 x+ a2 m3   a3 m2


2
+



 

1+

a3 m1   a1 m3 a2 m3   a3m 2

2
+



a1 m2   a2 m1 y+ a2 m3   a3 m2 a1 m2   a2 m1 a2 m3   a3 m2

2

2 3
=

0

(1.4)

As others have observed [?], this is a circle (LH in figure 2.2). A similar derivation can be used to establish the image of a sphere in such a camera the only significant change being that the resulting condition is the product of two separate circle equations, indicating an ambiguity which can trivially be resolved.

Test chapter

6


Test starred chapter
So far we have been limited in which objects we can manipulate and intersect in CGA. Specifically we can only deal with planes, circles, spheres, lines and points. In this section we consider a method of extending our approach to conics and intersections thereof. We shall proceed by considering the 3dimensional Euclidean case but this method may be generalised to higher dimensions if required; here we follow the procedure outlined in [?]. We shall begin by considering the set of points on the unit sphere at the origin:
¨

c e1 + s c e2 + s c e3 :  P (0; 2];  P (0; ]

©

form F (¡) to obtain the set, S, of representations for these points:
&

where c = cos(), s = sin() and similarly for s and c . We apply the trans'

S=

n n ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 2 2

and consider the effect of the transform from [?] below
i  C (X ) =  X + (X ¡ e1 )  n ¯ 2 h

which we shall term the conic transform, upon the elements of S where  is chosen so that our normalisation constraint C (X ) ¡ n =  1 still holds:
& n n 1 ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 1    cos  2 2 '

fC(X ) : X P Sg 


2
Another Test Chapter -- This time we will use a very long title and see how wrapping works
So far we have been limited in which objects we can manipulate and intersect in CGA. Specifically we can only deal with planes, circles, spheres, lines and points. In this section we consider a method of extending our approach to conics and intersections thereof. We shall proceed by considering the 3dimensional Euclidean case but this method may be generalised to higher dimensions if required; here we follow the procedure outlined in [?]. We shall begin by considering the set of points on the unit sphere at the origin:
¨

c e1 + s c e2 + s c e3 :  P (0; 2];  P (0; ]

©

form F (¡) to obtain the set, S, of representations for these points:
&

where c = cos(), s = sin() and similarly for s and c . We apply the trans'

S=

n n ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 2 2

and consider the effect of the transform from [?] below
i  C (X ) =  X + (X ¡ e1 )  n ¯ 2 h

which we shall term the conic transform, upon the elements of S where  is chosen so that our normalisation constraint C (X ) ¡ n =  1 still holds:
& n n 1 ¯ + c e1 + s c e2 + s c e3   :  P (0; 2];  P (0; ] 1    cos  2 2 '

fC(X ) : X P Sg 


2.1

Test section
The elements of this set are no-longer null-vectors (they have extra components parallel to n) but one may still apply the inverse mapping F  1 (¡) and extract a spatial vector (i.e. one with no components parallel to e or e). It ¯ is found [?, ?] that the spatial vectors extracted thus lie on the surface of a quadric with a rotational cross-section corresponding to a conic. The form of this conic cross-section is determined by the parameter  which can be interpreted as the eccentricity:

 

 = 0 : The set of points lie on the unit sphere. 0 <  < 1 : The set of points lie on an ellipsoid formed by rotating an ellipse in the e12 plane about e1 . The origin lies at one of the foci and  is the eccentricity.

 

 = 1 : The set of points lie on a paraboloid specified by the points

fx : 2x ¡ e1 = [(x ¡ e2)2 + (x ¡ e3)2]   1g

:

 > 1 : The set of points lie on a two-sheeted hyperboloid formed by rotating an hyperbola in the e12 plane about e1 . The origin is once again one of the foci and the eccentricity is .

We may therefore form a set of representations for points lying on these conics by simply applying appropriate translation, dilation and rotation rotors after the conic transform.

2.1.1

Properties of the conic transform
It can further be shown [?] that the conic transform preserves the outer prodY ) = C (X )  C (Y ). It also preserves the `special' vectors n and n. From this ¯ we can easily show that C (¡) does not change the nature of `flat' objects (i.e. C (X1  X2  ¡ ¡ ¡  Xi  n) C (X1 )  C (X2 )  ¡ ¡ ¡  C (Xi )  C (n) C (X1 )  C (X2 )  ¡ ¡ ¡  C (Xi )  n: planes and lines transform to other planes and lines) since
= =

uct but not the inner (and hence geometric) products. That is to say C (X 

Another Test Chapter -- This time we will use a very long title and see how wrapping works

9


It is also easy to verify by direct substitution that the conic transform preserves direction of points from the origin, i.e. that F  1 (C (F (ai ei ))) = ai ei 1   a1

where we have adopted the usual summation convention.

2.1.2

Intersections
We may now consider how to apply this transform to intersecting conics with lines. Suppose that we have found a rotor R and value of  such that the set of points represented by ~ fRC(X )R : X P Sg lie on the conic we wish to intersect. Suppose further that we wish to intersect it with the line represented by the trivector L (as in figure 2.1a). We shall denote the points of intersection A and B. Now consider the effect of apply-

 ~ ing C 1 (RX R) to each of our objects and points (where X is the appropriate
object). The points on the conic are transformed to the unit sphere. The line,

 ~ L, is transformed to C 1 (RLR) (figure 2.1) which is still a line since the conic
transform maps lines to lines. The points of intersection between this new line and our unit sphere may be found via the usual meet formulation:

 ~ AH  BH =   C 1 (RLR)
where  is the multivector representing the unit sphere which may be formed as  = F (e1 )  F (e2 )  F (e3 )  F ( e1 ) or similar. ~ ~ Finally we consider the transformed points A = RC (AH )R and B = RC (BH )R.

 ~ They must lie upon our original line L since AH and BH clearly lie on C 1 (RLR)
and

 ~ ~ RC (C 1 (RLR))R = L:
They must also lie upon our conic since AH and BH lie on the unit sphere and the transformation is exactly that which generated our original conic. If they lie upon our conic and upon L they must therefore be the points of intersection. We have therefore formulated a method for intersecting lines and conics.

Another Test Chapter -- This time we will use a very long title and see how wrapping works

10


Figure 2.1: Intersection of line L with (a) conic and (b) transformation back to intersection with unit sphere.

2.1.3

Reflections
We now consider the reflection of rays from conics. In order to reflect a ray we wish to find the tangent plane for a conic at the intersection point of the incoming ray with the conic. Again we make use of the fact that C (¡) maps

 ~ planes to planes and apply C 1 (RX R) to all objects moving the points on the

conic to the unit sphere. We then find the intersection point and tangent plane for the unit sphere. It can be shown [?] that when transformed back ~ via RC (¡)R the tangent plane of the sphere maps to the tangent plane for the conic. Reflection can then be performed by simply reflecting the incoming ray L in this plane, : LH = L:

2.2

Line Images in a Para-catadioptric Camera
As an illustration of the power of the techniques described above, let us consider the simple but useful question of what the image of a straight line in a parabolic mirror based Single View Point catadioptric (SVP Para-catadioptric) camera is. This problem has been considered in a number of papers e.g. [?, ?, ?, ?] and is useful for calibration and scene reconstruction. The setup in question is illustated in figure 2.2. With a parabolic mirror the SVP constraint requires that all the rays from the mirror imaged by the camera are parallel to the mirror axis and hence the camera is orthographic. Let us consider the source of light forming an image at the point xe2 + ye3 . As

Another Test Chapter -- This time we will use a very long title and see how wrapping works

11


Figure 2.2: Para-catadioptric Line Image Formation

we are imaging with an orthographic camera, for the setup shown, this ray is in the e1 direction, which is axis of both the camera and the parabolic mirror. The focus of the parabolic mirror is situated at the origin. S1
= [e23 + (xe3

  ye2)n]£

This result is easily established if we consider the form of the dual of a line [?]. L£
=

mI3 + [(a  m)I3 ]n ^ ^

with m = e1 (the ray's direction), a = xe2 + ye3 (a point on the ray) and I3 = e123 . ^ This form is analogous to writing the line in terms of Plucker coordinates ¨ where 3 of the coordinates give the line's direction and the other 3 give its moment about the origin.

Another Test Chapter -- This time we will use a very long title and see how wrapping works

12


3
Matrices
We are interested in the reflection of this ray in the mirror. This reflected ray, S2 is found as described in Section 2.1.3. S2
=

1   x2   y2 e145   xe245   ye345 2

(3.1)

For this ray to be the image ray of a point on a line L they must intersect and hence L  S2
=

0

(3.2)

As stated above, a line, L, with unit direction vector m = m1 e1 + m2 e2 + m3 e3 ^ (such that m2 ^ expressed as L
= [mI3 + ((a ^ =

1) passing through the point a = a1 e1 + a2 e2 + a3 e3 , can be

 m)I3)n]£ ^

(3.3)

Subsituting equations 3.3 and 3.1 into 3.2 and rearranging, the condition obtained is
 2

a3 m1   a1 m3 x+ a2 m3   a3 m2


2
+



 

1+

a3 m1   a1 m3 a2 m3   a3m 2

2
+



a1 m2   a2 m1 y+ a2 m3   a3 m2 a1 m2   a2 m1 a2 m3   a3 m2

2

2 3
=

0

(3.4)

As others have observed [?], this is a circle (LH in figure 2.2). A similar derivation can be used to establish the image of a sphere in such a camera the only


significant change being that the resulting condition is the product of two separate circle equations, indicating an ambiguity which can trivially be resolved. We may form a rotor R using some generating bivector B via R = exp(B): In 3d we may represent any rotation and translation rotor as a 4 ¢ 4 matrix

R where R

P
=R

Q

Ac 01

S

and A is some rotation matrix and c is some translation vector. The generator bivector, B, may itself be parameterised in terms of a spatial bivector P normalised s.t. P2 =  1, a scalar  and a spactial vector t : B=  nt P+ : 2 2

Letting P = p1 e12 + p2 e23 + p3 e31 and t = t1 e1 + t2 e2 + t3 e3 we may represent B via the vector c: c = [ p1 p2 p3 t1 t2 t3 ]T : Using the generator representation is useful since any 6d vector c represents a valid generator and, hence, a valid rotor yet the 4 ¢ 4 matrix representation is useful for existing graphics algorithms. This note aims to develop an algorithm for converting from one to another with the proviso that converting from a matrix representation to a generator is lossy since the matrix representation cannot uniquely represent rotations by more the 2. fsfsdsf sddgdgs sgsdg

3.1

Theory
Given a rotor R generated by a bivector B of the form above we may find a function h(; P; t ; p; ) which applies the rotor generated by ; P and t to the vector p: ~ h(; P; t ; p; 1) = F  1 RF ( p)R
  ¡

Matrices

14


where F (¡) is our usual vector to null-vector mapping. After a little algebra1 we can see that the following satisfies this requirement: h(; P; t ; p; ) = c2 p   s2 P pP   sc [ pP   P p]

kc   1 sk kc + 1 t+ Pt P   (t P   Pt ) + 2 2 2

!

(3.5)

where s = sin(=2), c = cos(=2) and k = sinc(=2). The function h(; P; t ; p; ) is clearly linear in ( p; ) and so we can find some 3 ¢ 4 matrix H , dependent on ; P and t , s.t.
P Q

eT H R where eT
= [e1 e2 e3 ]

v( p) 1

S = h( p; 1):

(3.6)

and v( p) = [ p ¡ e1 ; p ¡ e2 ; p ¡ e3 ]T . It is fairly clear that
P Q

R

=R

H
0001

S:

3.1.1

Finding H from a generator
Given A = a12 e12 + a23 e23 + a31 e31 and b = b1 e1 + b2 e2 + b3 e3 , if we define
P T T R QP UT SR Q U S

0

a12 0

f1 (A; b) = T

 a12
a31

 a31 U T b1 U
a23 U T b2 U 0 b3

 a23

f2 (A; b) = (a12 b3 + a23 b1 + a31 b2 ) it is easy to show directly that Ab = f2 (A; b) e123 + [e1 e2 e3 ] f1 (A; b) and bA = f2 (A; b) e123   [e1 e2 e3 ] f1 (A; b) Hence bA   Ab =   [e1 e2 e3 ] 2f1 (A; b):
1 This

phrase covers a multitude of sins...

Matrices

15


Defining
P T T M1 (A) = T R

0

a12 0

 a12
a31

 a31 U
U a23 U S

Q

P

Q

and

 a23

b T 1U T U v(b) = T b2 U R S b3

0

we may rewrite equation 3.5 as h(; P; t ; p; ) = c2 eT v( p)   s2 P pP + 2sc eT M1 (P)v( p)

kc   1 kc + 1 T e v(t ) + Pt P + sk eT M1 (P)v(t ) + 2 2

!
:

Similarly it is easy to verify that AbA = eT M2 (A)v(b) where
P T T R

a22   a23 + a21 1 2 3

M2 (A) = T

 2a23a31  2a12a23

 2a23a31  2a12a23 U U a22 + a23   a21  2a12a31 U 1 2 3 S 2 + a2 + a2  2a12a31  a12 23 31

Q
:

We can now substitute into h(; P; t ; p; ) to obtain h(; P; t ; p; ) = c2 eT v( p)   s2 eT M2 (P)v( p) + 2sc eT M1 (P)v( p)

kc   1 T kc + 1 T e v(t ) + e M2 (P)v(t ) + sk eT M1 (P)v(t ) + 2 2
¢2 c v( p)

!

T =e

T + e

  s2 M2(P)v( p) + 2sc M1(P)v( p) ! kc + 1 kc   1 v(t ) + M (P)v(t ) + sk M (P)v(t )
2 2
2 1

£

:

Taking I3 as the 3 ¢ 3 identity matrix, defining M3 (P) = kc   1 kc + 1 I3 + M2 (P) + sk M1 (P) 2 2

and comparing with equation 3.6 we see that

H

=

¢2 c I3

  s2 M2(P) + 2sc M1(P) ; M3(P)v(t )

£

which is indeed a 3 ¢ 4 matrix as required. The matrix R may now be found easily.

Matrices

16


3.1.2

Finding the generator from H
Firstly represent H as

H
where

= [A ; c]

A = c2 I3   s2 M2 (P) + 2sc M1 (P) and c = M3 (P)v(t ): (3.7)

Both A and c may be extracted from R easily. Given the anti-symmetric and symmetric nature of M1 (P) and M2 (P) it is clear that A + AT A   AT
=2

¢2 c I3

  s2 M2(P)

£

= 4sc M1 (P):

If sc T= 0 then we may recover P by extracting elements of A   AT and renormalising. If sc = 0 then either s = 0 or c = 0. If s = 0 it implies  = 2n, c = 1 and therefore that A + AT should be the identity matrix and we are free to choose P as we wish. If c = 0 then s = ¦1 and A + AT
= 2M2 (P).

We can then

extract P from M2 (P). The sign of s, in this case, is arbitrary. Assuming we have estimates for s, k and c from above, we may estimate M3 (P) directly and hence recover v(t ) = M 1 (P)c: 3 In practice we might wish to use LU decomposition or similar rather than computing the matrix inverse if we deal with spaces with higer dimensionality. Finally, given s, c and k, an estimate for  can be made.

Matrices

17


